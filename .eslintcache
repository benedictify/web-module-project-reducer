[{"/Users/benedict/lambda/web-module-project-reducer/src/index.js":"1","/Users/benedict/lambda/web-module-project-reducer/src/App.js":"2","/Users/benedict/lambda/web-module-project-reducer/src/reportWebVitals.js":"3","/Users/benedict/lambda/web-module-project-reducer/src/components/TotalDisplay.js":"4","/Users/benedict/lambda/web-module-project-reducer/src/components/CalcButton.js":"5","/Users/benedict/lambda/web-module-project-reducer/src/reducers/index.js":"6","/Users/benedict/lambda/web-module-project-reducer/src/actions/index.js":"7"},{"size":500,"mtime":1635777874251,"results":"8","hashOfConfig":"9"},{"size":3066,"mtime":1635825549299,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1635777874251,"results":"11","hashOfConfig":"9"},{"size":424,"mtime":1635777874251,"results":"12","hashOfConfig":"9"},{"size":286,"mtime":1635777874250,"results":"13","hashOfConfig":"9"},{"size":1182,"mtime":1635825411374,"results":"14","hashOfConfig":"9"},{"size":792,"mtime":1635825344331,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"10zacx5",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/benedict/lambda/web-module-project-reducer/src/index.js",[],["34","35"],"/Users/benedict/lambda/web-module-project-reducer/src/App.js",["36","37"],"import React, { useReducer } from 'react';\n\nimport './App.css';\n\nimport TotalDisplay from './components/TotalDisplay';\nimport CalcButton from './components/CalcButton';\n\nimport reducer, { initialState } from './reducers/index'\n\nimport { applyNumber, changeOperation, clearDisplay, memAdd, memClear, memRecall } from \"./actions/index\"\n\nfunction App() {\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tconst numberHandler = (number) => {\n\t\tdispatch(applyNumber(number))\n\t} \n\n\tconst operationHandler = (newOp) => {\n\t\tdispatch(changeOperation(newOp))\n\t}\n\n\tconst clearHandler = () => {\n\t\tdispatch(clearDisplay())\n\t}\n\n\tconst memAddHandler = () => {\n\t\tdispatch(memAdd())\n\t}\n\n\tconst memRecallHandler = () => {\n\t\tdispatch(memRecall())\n\t}\n\n\tconst memClearHandler = () => {\n\t\tdispatch(memClear())\n\t}\n\n\tconsole.log(state.total)\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href=\"#\"><img width=\"40px\" src=\"./Lambda-Logo-Red.png\"/> Lambda Reducer Challenge</a>\n      </nav>\n\n      <div className = \"container row mt-5\">\n        <div className=\"col-md-12 d-flex justify-content-center\">\n          <form name=\"Cal\">\n            \n            <TotalDisplay value={state.total}/>\n            <div className=\"row details\">\n              <span id=\"operation\"><b>Operation:</b> {state.operation}</span>\n              <span id=\"memory\"><b>Memory:</b> {state.memory}</span>\n            </div>\n            \n            <div className=\"row\">\n              <CalcButton value={\"M+\"} onClick={() => memAddHandler()}/>\n              <CalcButton value={\"MR\"} onClick={() => memRecallHandler()}/>\n              <CalcButton value={\"MC\"} onClick={() => memClearHandler()}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={1} onClick={() => numberHandler(1)}/>\n              <CalcButton value={2} onClick={() => numberHandler(2)}/>\n              <CalcButton value={3} onClick={() => numberHandler(3)}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={4} onClick={() => numberHandler(4)}/>\n              <CalcButton value={5} onClick={() => numberHandler(5)}/>\n              <CalcButton value={6} onClick={() => numberHandler(6)}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={7} onClick={() => numberHandler(7)}/>\n              <CalcButton value={8} onClick={() => numberHandler(8)}/>\n              <CalcButton value={9} onClick={() => numberHandler(9)}/>\n            </div>\n\n            <div className=\"row\">\n              <CalcButton value={\"+\"} onClick={() => operationHandler(\"+\")}/>\n              <CalcButton value={\"*\"} onClick={() => operationHandler(\"*\")}/>\n              <CalcButton value={\"-\"} onClick={() => operationHandler(\"-\")}/>\n            </div>\n\n            <div className=\"row ce_button\">\n              <CalcButton value={\"CE\"} onClick={() => clearHandler()}/>\n            </div>\n\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/benedict/lambda/web-module-project-reducer/src/reportWebVitals.js",[],"/Users/benedict/lambda/web-module-project-reducer/src/components/TotalDisplay.js",[],"/Users/benedict/lambda/web-module-project-reducer/src/components/CalcButton.js",[],"/Users/benedict/lambda/web-module-project-reducer/src/reducers/index.js",["38"],"import { ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, CLEAR_DISPLAY, MEM_ADD, MEM_CLEAR, MEM_RECALL } from './../actions';\n\nexport const initialState = {\n\ttotal: 0,\n\toperation: \"+\",\n\tmemory: 0\n}\n\nconst calculateResult = (num1, num2, operation) => {\n\tswitch (operation) {\n\t\tcase (\"+\"):\n\t\t\treturn num1 + num2;\n\t\tcase (\"*\"):\n\t\t\treturn num1 * num2;\n\t\tcase (\"-\"):\n\t\t\treturn num1 - num2;\n\t}\n}\n\nconst reducer = (state, action) => {\n\tconst { operation } = state;\n\n\tswitch (action.type) {\n\t\tcase (ADD_ONE):\n\t\t\treturn ({\n\t\t\t\t...state,\n\t\t\t\ttotal: state.total + 1\n\t\t\t});\n\n\t\tcase (APPLY_NUMBER):\n\t\t\treturn ({\n\t\t\t\t...state,\n\t\t\t\ttotal: calculateResult(state.total, action.payload, operation)\n\t\t\t});\n\n\t\tcase (CHANGE_OPERATION):\n\t\t\treturn ({\n\t\t\t\t...state,\n\t\t\t\toperation: action.payload\n\t\t\t});\n\t\t\n\t\tcase (CLEAR_DISPLAY): \n\t\t\treturn ({\n\t\t\t\t...state,\n\t\t\t\ttotal: 0\n\t\t\t});\n\n\t\tcase (MEM_ADD): \n\t\t\treturn ({\n\t\t\t\t...state,\n\t\t\t\tmemory: state.memory + state.total\n\t\t\t});\n\n\t\tcase MEM_RECALL: \n\t\t\treturn({\n\t\t\t\t...state,\n\t\t\t\ttotal: calculateResult(state.total, state.memory, operation)\n\t\t\t})\n\n\t\tcase MEM_CLEAR: \n\t\t\treturn({\n\t\t\t\t...state,\n\t\t\t\tmemory: 0\n\t\t\t})\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default reducer;","/Users/benedict/lambda/web-module-project-reducer/src/actions/index.js",[],["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":44,"column":9,"nodeType":"47","endLine":44,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":44,"column":46,"nodeType":"47","endLine":44,"endColumn":93},{"ruleId":"50","severity":1,"message":"51","line":10,"column":2,"nodeType":"52","messageId":"53","endLine":17,"endColumn":3},{"ruleId":"41","replacedBy":"54"},{"ruleId":"43","replacedBy":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["56"],["57"],"no-global-assign","no-unsafe-negation"]